#pragma once

// Terms...
// * BC = Bytecode
// * BB = Basic-Block
// * SSA = Static Single Assignment

// Output //
.decl ERROR(stmt: symbol, msg: symbol)
.decl VAR(method: symbol, var: symbol, type: symbol, name: symbol)
.decl VarRange(var: symbol, startIndex: number, endIndex: number)
.decl Field(fld: symbol, type: symbol, name: symbol, owner: symbol)
.decl ComponentType(arrayType: symbol, compType: symbol)
.decl FORMAL_PARAM(method: symbol, pos: number, var: symbol)
.decl EXCEPTION_HANDLER(method: symbol, fromStmt: symbol, toStmt: symbol, handlerStmt: symbol, type: symbol, var: symbol)
.decl BasicBlock(method: symbol, startStmt: symbol, endStmt: symbol)
.decl BasicBlockSucc(method: symbol, fromBB: symbol, toBB: symbol)
// Stmt with the final ordering
.decl Stmt(stmt: symbol, method: symbol, index: number)
.decl NextStmt(fromStmt: symbol, toStmt: symbol)
.decl ASSIGN(stmt: symbol, to: symbol)
.decl PHI_ASSIGN(stmt: symbol, to: symbol)
.decl CAST(stmt: symbol, to: symbol, type: symbol)
.decl Operator(stmt: symbol, op: symbol)
.decl Operand_VAR(stmt: symbol, pos: number, oper: symbol)
.decl Operand_CONST(stmt: symbol, pos: number, oper: symbol, type: symbol)
.decl SLOAD(stmt: symbol, fld: symbol)
.decl SSTORE(stmt: symbol, fld: symbol)
.decl ILOAD(stmt: symbol, var: symbol, fld: symbol)
.decl ISTORE(stmt: symbol, var: symbol, fld: symbol)
.decl RET(stmt: symbol)
.decl RET_VOID(stmt: symbol)
.decl IF(stmt: symbol, jumpStmt: symbol)
.decl GOTO(stmt: symbol, jumpStmt: symbol)
.decl ALLOC(stmt: symbol, to: symbol, heap: symbol, type: symbol)
.decl ARRAY_ALLOC(stmt: symbol, to: symbol, heap: symbol, type: symbol)
.decl ALOAD(stmt: symbol, array: symbol)
.decl ASTORE(stmt: symbol, array: symbol)
.decl VCALL(stmt: symbol, base: symbol, sig: symbol)
.decl SPCALL(stmt: symbol,  base: symbol, sig: symbol)
.decl SCALL(stmt: symbol,  sig: symbol)
.decl INIT_CALL(stmt: symbol)
.decl THROW(stmt: symbol, var: symbol)

.input Field
.input ComponentType
.input FORMAL_PARAM

// Input //
.decl BytecodeStmt(id: symbol, method: symbol, index: number)
.decl Invocation(sig: symbol, argc: number, retType: symbol, qualifiedName: symbol)
.decl AllocType(stmt: symbol, type: symbol)
.decl IncValue(stmt: symbol, value : symbol, type: symbol)
.input BytecodeStmt
.input Invocation
.input AllocType
.input IncValue

// Bytecode phase
.decl OpcodeExt(stmt: symbol, opcode: symbol, oper: symbol)
.decl p1_Var(method: symbol, var: symbol, name: symbol, type: symbol, startIndex: number, endIndex: number)
.decl p1_Next(fromStmt: symbol, toStmt: symbol)
.decl p1_Assign(stmt: symbol, to: symbol)
.decl p1_Cast(stmt: symbol, type: symbol, fromType: symbol)
.decl p1_Operator(stmt: symbol, op: symbol)
.decl p1_Operand(stmt: symbol, pos: number, type: symbol, oper: symbol)
.decl p1_SLoad(stmt: symbol, fld: symbol)
.decl p1_SStore(stmt: symbol, fld: symbol)
.decl p1_ILoad(stmt: symbol, fld: symbol)
.decl p1_IStore(stmt: symbol, fld: symbol)
.decl p1_Ret(stmt: symbol)
.decl p1_RetVoid(stmt: symbol)
.decl p1_If(stmt: symbol, jumpStmt: symbol)
.decl p1_Goto(stmt: symbol, jumpStmt: symbol)
.decl p1_Alloc(stmt: symbol, to: symbol, heap: symbol, type: symbol)
.decl p1_ArrayAlloc(stmt: symbol, heap: symbol, type: symbol)
.decl p1_ALoad(stmt: symbol)
.decl p1_AStore(stmt: symbol, array: symbol)
.decl p1_VCall(stmt: symbol, base: symbol, sig: symbol)
.decl p1_SPCall(stmt: symbol, base: symbol, sig: symbol)
.decl p1_SCall(stmt: symbol, sig: symbol)
.decl p1_InitCall(sig: symbol)
.decl p1_Throw(stmt: symbol, var: symbol)
.decl p1_ExceptionHandler(method: symbol, fromStmt: symbol, toStmt: symbol, handlerStmt: symbol, type: symbol, var: symbol)
// SSA phase
.decl p2_Assign(stmt: symbol, var: symbol, ssaVar: symbol, index: number, inBB: symbol)
.decl p2_PhiAssign(stmt: symbol, to: symbol, ssaTo: symbol)
.decl p2_Operand(stmt: symbol, pos: number, oper: symbol)
.decl p2_VarInfo(ssaVar: symbol, ssaName: symbol, var: symbol)