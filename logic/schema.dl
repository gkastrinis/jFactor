#pragma once

// Output //
.decl VCALL(stmt: symbol, base: symbol, sig: symbol)
.decl SPCALL(stmt: symbol,  base: symbol, sig: symbol)
.decl SCALL(stmt: symbol,  sig: symbol)
.decl ALLOC(stmt: symbol, to: symbol, heap: symbol, type: symbol)
.decl IF(stmt: symbol, jumpStmt: symbol)
.decl GOTO(stmt: symbol, jumpStmt: symbol)
.decl RET(stmt: symbol)
.decl RET_VOID(stmt: symbol)
.decl OPERATOR(stmt: symbol, op: symbol)
.decl ACTUAL_PARAM(stmt: symbol, pos: number, op: symbol)
.decl ACTUAL_RET(stmt: symbol, var: symbol)
.decl NEXT(fromStmt: symbol, toStmt: symbol)
.decl THROW(stmt: symbol, var: symbol)
.decl EXCEPTION_HANDLER(method: symbol, fromStmt: symbol, toStmt: symbol, handlerStmt: symbol, type: symbol, var: symbol)

.output VCALL
.output SPCALL
.output SCALL
.output ALLOC
.output IF
.output GOTO
.output RET
.output RET_VOID
.output OPERATOR
.output ACTUAL_PARAM
.output ACTUAL_RET
//.output NEXT
.output THROW
.output EXCEPTION_HANDLER

// Input //
.decl Stmt(id: symbol, method: symbol, index: number)
.decl Var(method: symbol, varIndex: symbol, var: symbol, name: symbol, type: symbol, startLabel: symbol, endLable: symbol)
.decl Label(method: symbol, label: symbol, stmt: symbol, index: number)
.decl Handler(method: symbol, startLabel: symbol, endLabel: symbol, handlerLabel: symbol, type: symbol)
.decl Invocation(sig: symbol, argc: number, retType: symbol)
.decl AllocType(stmt: symbol, type: symbol)
.decl IncValue(stmt: symbol, value : symbol)
.input Stmt
.input Var
.input Label
.input Handler
.input Invocation
.input AllocType
.input IncValue
.decl __Opcode(stmt: symbol, opcode: symbol, oper: symbol)
.input __Opcode(filename="Opcode.facts")

// Core //

.type Stack = [top: symbol, rest: Stack]
.decl StackBeforeStmt(stmt: symbol, stack: Stack)
.decl OpcodeExt(stmt: symbol, opcode: symbol, oper: symbol)
.decl DEBUG(stmt: symbol, out: symbol)
// Opcodes
.decl BinOpcode(opcode: symbol, op: symbol)
.decl UnaryOpcode(opcode: symbol, op: symbol)
.decl ConstLoadOpcode(opcode: symbol)
.decl CallOpcode(opcode: symbol)
.decl ZeroCondJumpOpcode(opcode: symbol, op: symbol)
.decl NullCondJumpOpcode(opcode: symbol, op: symbol)
.decl CondJumpOpcode(opcode: symbol, op: symbol)
