// Output
.decl ASSIGN(method: symbol, index: number, to: symbol)
.decl OPERAND(method: symbol, index: number, pos: number, from: symbol)
.decl OPERATOR(method: symbol, index: number, op: symbol)
.decl VCALL(method: symbol, index: number, base: symbol, sig: symbol)
.decl SPCALL(method: symbol, index: number, base: symbol, sig: symbol)
.decl ACTUAL_PARAM(method: symbol, index: number, pos: number, var: symbol)
.decl FORMAL_RET(method: symbol, index: number, op: symbol)
.decl FORMAL_RET_VOID(method: symbol, index: number)
.decl ACTUAL_RET(method: symbol, index: number, var: symbol)
.decl ALLOC(method: symbol, index: number, to: symbol, heap: symbol, type: symbol)
.output ASSIGN
.output OPERAND
.output OPERATOR
.output VCALL
.output SPCALL
.output ACTUAL_PARAM
.output FORMAL_RET
.output FORMAL_RET_VOID
.output ACTUAL_RET
.output ALLOC

// Input
.decl Opcode(method: symbol, index: number, opcode: symbol, oper: symbol)
.decl Var(method: symbol, index: symbol, var: symbol, name: symbol, type: symbol)
.decl Invocation(sig: symbol, argc: number, retType: symbol)
.decl AllocType(method: symbol, index: number, type: symbol)
.input Opcode
.input Var
.input Invocation
.input AllocType

// Opcodes
.decl BinOpcode(opcode: symbol, op: symbol)
.decl VarLoadOpcode(opcode: symbol)
.decl VarStoreOpcode(opcode: symbol)
.decl ConstLoadOpcode(opcode: symbol)
.decl ReturnValueOpcode(opcode: symbol)
.decl CallOpcode(opcode: symbol)
.decl PopOpcode(opcode: symbol)

BinOpcode("dmul", "*").

VarLoadOpcode("iload").
VarLoadOpcode("lload").
VarLoadOpcode("fload").
VarLoadOpcode("dload").
VarLoadOpcode("aload").
VarStoreOpcode("istore").
VarStoreOpcode("lstore").
VarStoreOpcode("fstore").
VarStoreOpcode("dstore").
VarStoreOpcode("astore").
ConstLoadOpcode("ldc").
ConstLoadOpcode("bipush").
ConstLoadOpcode("sipush").
ReturnValueOpcode("ireturn").
ReturnValueOpcode("dreturn").
CallOpcode("invokevirtual").
CallOpcode("invokespecial").
CallOpcode("X-invokeinit").

PopOpcode("pop").
PopOpcode("pop2").

///////////////////////////////////////////////////////////////

.type Stack = [top: symbol, rest: Stack]
.decl StackBeforeIndex(method: symbol, index: number, stack: Stack)
.decl ToSymbol(stack: Stack, out: symbol)
.decl DEBUG(m: symbol, i: number, out: symbol)
.output DEBUG

StackBeforeIndex(method, 0, nil) :- Opcode(method, _, _, _).

ToSymbol(nil, "=@@=") :- StackBeforeIndex(_, _, nil).
ToSymbol([head, stack], cat(head, cat(", ", out0))) :- StackBeforeIndex(_, _, [head, stack]), ToSymbol(stack, out0).
DEBUG(m, i, out) :- StackBeforeIndex(m, i, stack), ToSymbol(stack, out).

.decl __REQ_Var(method: symbol, index: number, stack: Stack)
.decl __RES_Var(method: symbol, index: number, var: symbol)
.decl __REQ_Param(method: symbol, index: number, pos: number, arity: number, stack: Stack)
.decl __VarFromIndex(method: symbol, index: symbol, var: symbol)
.decl __HeapToIndex(heap: symbol, method: symbol, index: number)
.decl __MaybeAssign(method: symbol, index: number, to: symbol)
.decl __MaybeActualParam(method: symbol, index: number, pos: number, var: symbol)

__VarFromIndex(method, i, var) :- Var(method, i, var, _, _).

///////////////////////////////////////////////////////////////

// -> constant value
StackBeforeIndex(method, i+1, [const, stack]) :-
	StackBeforeIndex(method, i, stack),
	Opcode(method, i, opcode, const),
	ConstLoadOpcode(opcode).

// -> var
StackBeforeIndex(method, i+1, [var, stack]) :-
	StackBeforeIndex(method, i, stack),
	Opcode(method, i, opcode, varIndex),
	VarLoadOpcode(opcode),
	__VarFromIndex(method, varIndex, var).

// return value ->
FORMAL_RET(method, i, oper),
StackBeforeIndex(method, i+1, stack) :-
	StackBeforeIndex(method, i, [oper, stack]),
	Opcode(method, i, opcode, _),
	ReturnValueOpcode(opcode).

// return void
FORMAL_RET_VOID(method, i),
StackBeforeIndex(method, i+1, stack) :-
	StackBeforeIndex(method, i, stack),
	Opcode(method, i, "return", _).

// -> heap id
__HeapToIndex(heap, method, i),
StackBeforeIndex(method, i+1, [heap, stack]) :-
	StackBeforeIndex(method, i, stack),
	Opcode(method, i, "new", heap).

// Dup only (?) follows a `new` opcode -- ignore it
StackBeforeIndex(method, i+1, stack) :-
	StackBeforeIndex(method, i, stack),
	Opcode(method, i, "dup", _).

// Pop (and ignore) the top operand in the stack
// Assignment already handled in the previous opcode
StackBeforeIndex(method, i+1, stack) :-
	StackBeforeIndex(method, i, [_, stack]),
	Opcode(method, i, opcode, _),
	VarStoreOpcode(opcode).

// Pop call arguments from stack
__REQ_Param(method, i, argc - 1, argc, stack) :-
	StackBeforeIndex(method, i, stack),
	Opcode(method, i, opcode, sig),
	CallOpcode(opcode),
	Invocation(sig, argc, _).

// actual arg1, arg2, ... ->
__MaybeActualParam(method, i, pos, param),
__REQ_Param(method, i, pos - 1, arity, stack) :-
	__REQ_Param(method, i, pos, arity, [param, stack]), pos >= 0.

// receiver object | Class | heap ->
// -> var to store invocation result
__REQ_Var(method, i, stack) :-
	Opcode(method, i, opcode, sig),
	CallOpcode(opcode),
	Invocation(sig, _, retType),
	(retType != "void" ; opcode = "X-invokeinit"),
	__REQ_Param(method, i, -1, _, [_, stack]).

StackBeforeIndex(method, i+1, stack) :-
	Opcode(method, i, opcode, sig),
	CallOpcode(opcode),
	Invocation(sig, _, "void"), opcode != "X-invokeinit",
	__REQ_Param(method, i, -1, _, [_, stack]).

// Pop receiver object from stack
//ASSIGN(method, i, base),
//OPERAND(method, i, 0, heap),
ALLOC(method, j, base, heap, type),
SPCALL(method, i, base, sig) :-
	Opcode(method, i, "X-invokeinit", sig),
	__REQ_Param(method, i, -1, _, [heap, _]),
	__HeapToIndex(heap, method, j),
	__RES_Var(method, i, base),
	AllocType(method, j, type).

// Pop receiver object from stack
SPCALL(method, i, base, sig) :-
	Opcode(method, i, "invokespecial", sig),
	__REQ_Param(method, i, -1, _, [base, _]).

// Pop receiver object from stack
VCALL(method, i, base, sig) :-
	Opcode(method, i, "invokevirtual", sig),
	__REQ_Param(method, i, -1, _, [base, _]).

// Store the top of the stack into a var
// Found in source code
__RES_Var(method, i, var) :-
	__REQ_Var(method, i, _),
	Opcode(method, i+1, opcode, varIndex),
	VarStoreOpcode(opcode),
	__VarFromIndex(method, varIndex, var).

// ...or generate a temp one
__RES_Var(method, i, var) :-
	__REQ_Var(method, i, _),
	Opcode(method, i+1, opcode, _),
	!VarStoreOpcode(opcode),
	var = cat(cat(method, "/"), cat("$r", to_string(i))).

// Handle all assignments to temp or source code vars
__MaybeAssign(method, i, var),
StackBeforeIndex(method, i+1, [var, stack]) :-
	__REQ_Var(method, i, stack),
	__RES_Var(method, i, var).

// Compute an intermediate result
// Swap order of operands due to stack semantics
OPERAND(method, i, 0, oper2),
OPERAND(method, i, 1, oper1),
OPERATOR(method, i, op),
__REQ_Var(method, i, stack) :-
	StackBeforeIndex(method, i, [oper1, [oper2, stack]]),
	Opcode(method, i, opcode, _),
	BinOpcode(opcode, op).

//// Load static field
//OPERAND(method, i, 0, oper1),
//__REQ_Var(method, i, stack) :-
//	StackBeforeIndex(method, i, stack),
//	Opcode(method, i, "getstatic", oper1).
//
//// TODO might be problematic
//StackBeforeIndex(method, i+1, stack) :-
//	StackBeforeIndex(method, i, [_, stack]),
//	Opcode(method, i, opcode, _),
//	PopOpcode(opcode).

///////////////////////////////////////////////////////////////

ASSIGN(method, i, to) :-
	__MaybeAssign(method, i, to),
	OPERAND(method, i, _, _),
	!ALLOC(method, i, to, _, _).

ACTUAL_RET(method, i, var) :-
	__MaybeAssign(method, i, var),
	Opcode(method, i, opcode, _),
	CallOpcode(opcode).

ACTUAL_PARAM(method, i, pos, maybeHeap) :-
	__MaybeActualParam(method, i, pos, maybeHeap),
	!ALLOC(_, _, _, maybeHeap, _).

ACTUAL_PARAM(method, i, pos, var) :-
	__MaybeActualParam(method, i, pos, heap),
	ALLOC(_, _, var, heap, _).