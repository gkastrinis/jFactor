#pragma once
#include "schema.dl"
#include "basic-blocks.dl"

.decl ToRename(stmt: symbol, var: symbol, ssaVar: symbol, ssaName: symbol, index: number, inBB: symbol)
.decl VarAliveAtStartOfBB(var: symbol, ssaVar: symbol, inBB: symbol)
.decl VarAliveAtEndOfBB(var: symbol, ssaVar: symbol, inBB: symbol)
.decl VarHasPrevDefInSameBB(stmt: symbol, var: symbol)
.decl VarRead(stmt: symbol, var: symbol)
.decl SSAVarForVarRead(stmt: symbol, var: symbol, ssaVar: symbol)
.decl HasMultipleDefs(var: symbol)

// Skip renaming of temp vars, or vars that are assigned only once
HasMultipleDefs(var) :-
	p1_Assign(stmt1, var),
	p1_Assign(stmt2, var),
	stmt1 != stmt2.

p2_VarInfo(ssaVar, ssaName, var),
p2_Assign(stmt, var, ssaVar, index, inBB) :-
	ToRename(stmt, var, ssaVar, ssaName, index, inBB),
	HasMultipleDefs(var).

p2_VarInfo(var, name, var),
p2_Assign(stmt, var, var, index, inBB) :-
	ToRename(stmt, var, _, _, index, inBB),
	p1_Var(_, var, _, name),
	!HasMultipleDefs(var).

// Mock assignments to formal parameters,
// so they are treated uniformly in the rest of the SSA logic
// Mock assignments are placed in the fake prologue BB
ToRename(stmt, var, var, name, PROLOGUE_INDEX, stmt) :-
	FORMAL_PARAM(method, _, var),
	BB_Start(method, stmt, PROLOGUE_INDEX),
	p1_Var(_, var, _, name).

// Rename all various "source" var assigns
ToRename(stmt, var, ssaVar, ssaName, index, startStmt) :-
	((p1_Assign(stmt, var), !p1_InitCall(stmt)) ;
	 p1_Alloc(stmt, var, _, _)),
	BytecodeStmt(stmt, method, index),
	BB_Range(method, startStmt, _, startIndex, endIndex),
	startIndex <= index, index <= endIndex,
	p1_Var(_, var, _, name),
	suffix = cat("#_", to_string(index)),
	ssaVar = cat(var, suffix), ssaName = cat(name, suffix).

// New var assignment at every Phi
// Add a Phi node only when there are multiple assignments
p2_PhiAssign(toBB, var, ssaVar),
ToRename(toBB, var, ssaVar, ssaName, startIndex, toBB) :-
	p2_Assign(_, var, _, _, fromBB1),
	BB_DominanceFrontier(fromBB1, toBB),
	p2_Assign(_, var, _, _, fromBB2),
	fromBB1 != fromBB2,
	p1_VarRange(var, varStart, varEnd),
	BB_Start(_, toBB, startIndex),
	varStart <= startIndex, startIndex <= varEnd,
	p1_Var(_, var, _, name),
	suffix = cat("#_PHI_", to_string(startIndex)),
	ssaVar = cat(var, suffix), ssaName = cat(name, suffix).

VarAliveAtStartOfBB(var, ssaVar, toBB) :-
	BB_Range(_, fromBB, endStmt, _, _),
	VarAliveAtEndOfBB(var, ssaVar, fromBB),
	p1_Next(endStmt, toBB),
	BB_Start(_, toBB, toBBIndex),
	p1_VarRange(var, varStart, varEnd),
	varStart <= toBBIndex, toBBIndex <= varEnd.

VarAliveAtEndOfBB(var, ssaVar, inBB) :-
	p2_Assign(_, var, ssaVar, maxIndex, inBB),
	maxIndex = max index : p2_Assign(_, var, _, index, inBB).

VarAliveAtEndOfBB(var, ssaVar, inBB) :-
	BB_Start(_, inBB, _),
	VarAliveAtStartOfBB(var, ssaVar, inBB),
	!p2_Assign(_, var, _, _, inBB).


// Previously, defined in this basic-block
VarHasPrevDefInSameBB(stmt, var),
SSAVarForVarRead(stmt, var, ssaVar) :-
	VarRead(stmt, var),
	BytecodeStmt(stmt, _, index),
	BytecodeStmtInBB(stmt, inBB),
	p2_Assign(_, var, ssaVar, maxMinIndex, inBB),
	maxMinIndex = max minIndex :
	{ p2_Assign(_, var, _, minIndex, inBB), minIndex < index }.

// Defined in a previous basic-block
SSAVarForVarRead(stmt, var, ssaVar) :-
	VarRead(stmt, var),
	BytecodeStmtInBB(stmt, inBB),
	!VarHasPrevDefInSameBB(stmt, var),
	VarAliveAtStartOfBB(var, ssaVar, inBB).

VarRead(stmt, var) :- p1_Operand(stmt, _, _, var).
VarRead(stmt, base) :- p1_VCall(stmt, base, _).
VarRead(stmt, base) :- p1_SPCall(stmt, base, _).
VarRead(stmt, var) :- p1_Throw(stmt, var).

p2_Operand(stmt, pos, ssaVar) :-
	p1_Operand(stmt, pos, _, var),
	SSAVarForVarRead(stmt, var, ssaVar).

p2_Operand(inBB, 0, oper) :-
	p2_PhiAssign(inBB, to, _),
	VarAliveAtStartOfBB(to, oper, inBB).

// Deal with constant operands
p2_Operand(stmt, pos, oper) :-
	p1_Operand(stmt, pos, _, oper),
	BytecodeStmtInBB(stmt, inBB),
	!VarHasPrevDefInSameBB(stmt, oper),
	!VarAliveAtStartOfBB(oper, _, inBB).