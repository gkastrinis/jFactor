#pragma once

.decl TAC(method: symbol, index: number, tac: symbol)
.decl TAC_RHS(stmt: symbol, out: symbol)
.decl OperandStr(stmt: symbol, pos: number, out: symbol)
.decl AllOperandsStrDownTo(stmt: symbol, pos: number, out: symbol)
.decl CallStmt(stmt: symbol, sig: symbol)

CallStmt(stmt, sig) :- VCALL(stmt, _, sig) ; SPCALL(stmt, _, sig) ; SCALL(stmt, sig).

// Ignore `pos` == -1, that stores the receiver object of a call
OperandStr(stmt, pos, name) :-
	Operand_VAR(stmt, pos, var), pos >= 0,
	VAR(_, var, _, name).

OperandStr(stmt, pos, const) :-
	Operand_CONST(stmt, pos, const, _).

// BINOP
TAC_RHS(stmt, CAT5(out0, " ", op, " ", out1)) :-
	Operator(stmt, op),
	OperandStr(stmt, 0, out0),
	OperandStr(stmt, 1, out1).

// UNOP
TAC_RHS(stmt, CAT3(op, " ", out0)) :-
	Operator(stmt, op),
	OperandStr(stmt, 0, out0),
	!OperandStr(stmt, 1, _).

// CAST
TAC_RHS(stmt, CAT4("(", type, ") ", out0)) :-
	CAST(stmt, _, type),
	OperandStr(stmt, 0, out0).

// Move instructions or var initializations
TAC_RHS(stmt, out) :-
	OperandStr(stmt, 0, out),
	!CAST(stmt, _, _),
	!CallStmt(stmt, _),
	!SLOAD(stmt, _),
	!ILOAD(stmt, _, _),
	!Operator(stmt, _),
	!OperandStr(stmt, 1, _).

// Call parameters
// Start from the last operand
AllOperandsStrDownTo(stmt, pos - 1, out) :-
	OperandStr(stmt, pos, out),
	!Operator(stmt, _),
	!OperandStr(stmt, pos + 1, _).

AllOperandsStrDownTo(stmt, pos - 1, CAT3(out1, ", ", out)) :-
	AllOperandsStrDownTo(stmt, pos, out),
	OperandStr(stmt, pos, out1).

// Invocations with no arguments
AllOperandsStrDownTo(stmt, -1, "") :-
	CallStmt(stmt, sig),
	Invocation(sig, 0, _, _).

TAC_RHS(stmt, CAT6(baseName, " -> ", qualifiedName, "(", out, ")")) :-
	(VCALL(stmt, base, sig) ; SPCALL(stmt, base, sig)),
	AllOperandsStrDownTo(stmt, -1, out),
	Invocation(sig, _, _, qualifiedName),
	Stmt(stmt, method, _, _),
	VAR(method, base, _, baseName).

TAC_RHS(stmt, CAT4(qualifiedName, "(", out, ")")) :-
	SCALL(stmt, sig),
	Invocation(sig, _, _, qualifiedName),
	AllOperandsStrDownTo(stmt, -1, out).

// Allocations
TAC_RHS(stmt, cat("new ", type)) :- ALLOC(stmt, _, _, type).

// Static field load
TAC_RHS(stmt, CAT3(owner, ".", fldName)) :-
	SLOAD(stmt, fld),
	Field(fld, _, fldName, owner).

// Static field store
TAC(method, index, CAT3(fldName, " = ", val)) :-
	SSTORE(stmt, fld),
	Stmt(stmt, method, _, index),
	Field(fld, _, fldName, _),
	((Operand_VAR(stmt, 1, valVar), VAR(_, valVar, _, val)) ; Operand_CONST(stmt, 1, val, _)).

// Instance field load
TAC_RHS(stmt, CAT3(name, ".", fldName)) :-
	ILOAD(stmt, var, fld),
	Field(fld, _, fldName, _),
	VAR(_, var, _, name).

// Instance field store
TAC(method, index, CAT5(name, ".", fldName, " = ", val)) :-
	ISTORE(stmt, var, fld),
	Stmt(stmt, method, _, index),
	VAR(_, var, _, name),
	Field(fld, _, fldName, _),
	((Operand_VAR(stmt, 1, valVar), VAR(_, valVar, _, val)) ; Operand_CONST(stmt, 1, val, _)).

// Assignments -- not in a catch block head
TAC(method, index, CAT3(name, " = ", out)) :-
	(ASSIGN(stmt, to) ; PHI_ASSIGN(stmt, to) ; CAST(stmt, to, _)),
	!INIT_CALL(stmt),
	!EXCEPTION_HANDLER(method, _, _, stmt, _, _),
	Stmt(stmt, method, _, index),
	VAR(method, to, _, name),
	TAC_RHS(stmt, out).

// Assignments -- in catch block head
TAC(method, index, CAT4("---CATCH--- ", name, " = ", out)) :-
	ASSIGN(handlerStmt, to),
	EXCEPTION_HANDLER(method, _, _, handlerStmt, _, _),
	Stmt(handlerStmt, method, _, index),
	VAR(method, to, _, name),
	TAC_RHS(handlerStmt, out).

// Calls to a constructor
TAC(method, index, out) :-
	SPCALL(stmt, _, _),
	Stmt(stmt, method, _, index),
	INIT_CALL(stmt),
	TAC_RHS(stmt, out).

// Calls without a return value
TAC(method, index, tac) :-
	CallStmt(stmt, _),
	Stmt(stmt, method, _, index),
	!ASSIGN(stmt, _),
	TAC_RHS(stmt, tac).

TAC(method, index, "return") :-
	RET_VOID(stmt),
	Stmt(stmt, method, _, index).

TAC(method, index, cat("return ", out)) :-
	RET(stmt),
	Stmt(stmt, method, _, index),
	OperandStr(stmt, 0, out).

TAC(method, index, cat("goto ", to_string(jumpIndex))) :-
	GOTO(stmt, jumpStmt),
	Stmt(stmt, method, _, index),
	Stmt(jumpStmt, method, _, jumpIndex).

TAC(method, index, CAT4("if (", out, ") jump ", to_string(jumpIndex))) :-
	IF(stmt, jumpStmt),
	Stmt(stmt, method, _, index),
	Stmt(jumpStmt, method, _, jumpIndex),
	TAC_RHS(stmt, out).

TAC(method, index, cat("throw ", varName)) :-
	THROW(stmt, var),
	Stmt(stmt, method, _, index),
	VAR(method, var, _, varName).

// TODO fix jump targets to correspond to visible statements
TAC(method, index, "---LABEL---") :-
	(IF(_, jumpStmt) ; GOTO(_, jumpStmt)),
	Stmt(jumpStmt, method, _, index).