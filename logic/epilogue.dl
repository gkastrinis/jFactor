#pragma once

// Bytecode statement to final statement
.decl BCToFinal(bcStmt: symbol, stmt: symbol)

BCToFinal(bcStmt, stmt) :-
	BytecodeStmt(bcStmt, method, bcIndex),
	Stmt(stmt, method, bcIndex, _).

NextStmt(fromStmt, toStmt) :-
	p1_Next(bcFromStmt, bcToStmt),
	BCToFinal(bcFromStmt, fromStmt),
	BCToFinal(bcToStmt, toStmt).

VarRange(var, startIndex, endIndex) :-
	p1_Var(method, var, _, _, bcStartIndex, bcEndIndex),
	Stmt(_, method, bcStartIndex, startIndex),
	Stmt(_, method, bcEndIndex, endIndex).

Operator(stmt, op) :- p1_Operator(bcStmt, op), BCToFinal(bcStmt, stmt).

VAR(method, ssaVar, type, ssaName) :-
	p2_Assign(_, var, ssaVar, _, _),
	p1_Var(method, var, _, type, _, _),
	p2_VarInfo(ssaVar, ssaName, var).

VAR(method, var, type, name) :-
	p1_Var(method, var, name, type, _, _),
	!p2_Assign(_, var, _, _, _).

ASSIGN(stmt, ssaTo) :-
	p2_Assign(bcStmt, _, ssaTo, _, _),
	BCToFinal(bcStmt, stmt),
	!p1_Cast(bcStmt, _, _),
	!p2_PhiAssign(bcStmt, _, ssaTo).

CAST(stmt, ssaTo, type) :-
	p1_Cast(bcStmt, type, _),
	p2_Assign(bcStmt, _, ssaTo, _, _),
	BCToFinal(bcStmt, stmt),
	p2_Operand(bcStmt, -1, type).

Operand_VAR(stmt, pos, oper) :-
	p2_Operand(bcStmt, pos, oper),
	BCToFinal(bcStmt, stmt),
	!p2_PhiAssign(bcStmt, _, _),
	VAR(_, oper, _, _).

Operand_CONST(stmt, pos, oper, type) :-
	p2_Operand(bcStmt, pos, oper), pos >= 0,
	p1_Operand(bcStmt, pos, type, oper),
	BCToFinal(bcStmt, stmt),
	!VAR(_, oper, _, _).

SLOAD(stmt, fld) :- p1_SLoad(bcStmt, fld), BCToFinal(bcStmt, stmt).

SSTORE(stmt, fld) :- p1_SStore(bcStmt, fld), BCToFinal(bcStmt, stmt).

ILOAD(stmt, var, fld) :-
	p1_ILoad(bcStmt, fld),
	BCToFinal(bcStmt, stmt),
	p2_Operand(bcStmt, 0, var).

ISTORE(stmt, var, fld) :-
	p1_IStore(bcStmt, fld),
	BCToFinal(bcStmt, stmt),
	p2_Operand(bcStmt, 0, var).

RET(stmt) :- p1_Ret(bcStmt), BCToFinal(bcStmt, stmt).

RET_VOID(stmt) :- p1_RetVoid(bcStmt), BCToFinal(bcStmt, stmt).

IF(stmt, jumpStmt) :-
	p1_If(bcStmt, bcJumpStmt),
	BCToFinal(bcStmt, stmt),
	BCToFinal(bcJumpStmt, jumpStmt).

GOTO(stmt, jumpStmt) :-
	p1_Goto(bcStmt, bcJumpStmt),
	BCToFinal(bcStmt, stmt),
	BCToFinal(bcJumpStmt, jumpStmt).

ALLOC(stmt, ssaTo, heap, type) :-
	p1_Alloc(bcStmt, to, heap, type),
	p2_Assign(bcStmt, to, ssaTo, _, _),
	BCToFinal(bcStmt, stmt).

VCALL(stmt, ssaBase, sig) :-
	p1_VCall(bcStmt, base, sig),
	SSAVarForVarRead(bcStmt, base, ssaBase),
	BCToFinal(bcStmt, stmt).

SPCALL(stmt, ssaBase, sig) :-
	p1_SPCall(bcStmt, base, sig),
	SSAVarForVarRead(bcStmt, base, ssaBase),
	BCToFinal(bcStmt, stmt).

SCALL(stmt, sig) :- p1_SCall(bcStmt, sig), BCToFinal(bcStmt, stmt).

INIT_CALL(stmt) :- p1_InitCall(bcStmt), BCToFinal(bcStmt, stmt).

THROW(stmt, ssaVar) :-
	p1_Throw(bcStmt, var),
	SSAVarForVarRead(bcStmt, var, ssaVar),
	BCToFinal(bcStmt, stmt).

EXCEPTION_HANDLER(method, fromStmt, toStmt, handlerStmt, type, var) :-
	p1_ExceptionHandler(method, bcFromStmt, bcToStmt, bcHandlerStmt, type, var),
	BCToFinal(bcFromStmt, fromStmt),
	BCToFinal(bcToStmt, toStmt),
	BCToFinal(bcHandlerStmt, handlerStmt).

BasicBlock(method, startStmt, endStmt) :-
	BB_Range(method, bcStartStmt, bcEndStmt, _, _),
	BCToFinal(bcStartStmt, startStmt),
	BCToFinal(bcEndStmt, endStmt).

BasicBlockSucc(method, fromBB, toBB) :-
	BasicBlock(method, fromBB, endStmt),
	NextStmt(endStmt, toBB).