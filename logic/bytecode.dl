#pragma once

.type Stack = [top: symbol, rest: Stack]
.decl StackBeforeStmt(stmt: symbol, stack: Stack)
.decl StackForNext(stmt: symbol, stack: Stack)

// Annotate operands on the stack with type information

#define TOP2(v2, v1, stack) [v2, [v1, stack]]
#define TOP4(v4, v3, v2, v1, stack) TOP2(v4, v3, TOP2(v2, v1, stack))

.decl REQ_Var(stmt: symbol, type: symbol, stack: Stack)
.decl RES_Var(stmt: symbol, var: symbol)
.decl REQ_Assign(stmt: symbol, to: symbol)
.decl REQ_ActualParam(stmt: symbol, pos: number, stack: Stack)

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////

// -> constant value
StackForNext(stmt, TOP2(type, const, stack)) :-
	OpcodeExt(stmt, opcode, const),
	ConstLoadOpcode(opcode, type),
	StackBeforeStmt(stmt, stack).

// -> value
StackForNext(stmt, TOP2(type, var, stack)) :-
	OpcodeExt(stmt, "X-load", var),
	StackBeforeStmt(stmt, stack),
	p1_Var(_, var, _, type, _, _).

// value ->
REQ_Assign(stmt, var),
p1_Operand(stmt, 0, type, oper),
StackForNext(stmt, stack) :-
	OpcodeExt(stmt, "X-store", var),
	StackBeforeStmt(stmt, TOP2(type, oper, stack)). // TODO compare types with vartype

// return value ->
p1_Ret(stmt),
p1_Operand(stmt, 0, type, oper),
StackForNext(stmt, stack) :-
	OpcodeExt(stmt, "X-return", _),
	StackBeforeStmt(stmt, TOP2(type, oper, stack)).

// return void
p1_RetVoid(stmt),
StackForNext(stmt, stack) :-
	OpcodeExt(stmt, "return", _),
	StackBeforeStmt(stmt, stack).

// Compute an intermediate result
// Swap order of operands due to stack semantics
p1_Operator(stmt, op),
p1_Operand(stmt, 0, type0, oper0),
p1_Operand(stmt, 1, type1, oper1),
REQ_Var(stmt, type, stack) :-
	OpcodeExt(stmt, opcode, _),
	BinOpcode(opcode, op),
	StackBeforeStmt(stmt, TOP4(type1, oper1, type0, oper0, stack)),
	type = INT_T. // todo infer type based on type1 and type0

p1_Operator(stmt, op),
p1_Operand(stmt, 0, type0, oper0),
REQ_Var(stmt, type, stack) :-
	OpcodeExt(stmt, opcode, _),
	UnaryOpcode(opcode, op),
	StackBeforeStmt(stmt, TOP2(type0, oper0, stack)),
	type = INT_T. // todo infer type based on type1

// Handle ++, --, +=, -=
p1_Assign(stmt, var),
p1_Operator(stmt, op),
p1_Operand(stmt, 0, type0, var),
p1_Operand(stmt, 1, type1, value),
StackForNext(stmt, stack) :-
	((OpcodeExt(stmt, "X-inc", var), op = "+") ;
	 (OpcodeExt(stmt, "X-dec", var), op = "-")),
	StackBeforeStmt(stmt, stack),
	p1_Var(_, var, _, type0, _, _),
	IncValue(stmt, value, type1).

// Handle casts
p1_Cast(stmt, type, fromType),
p1_Operand(stmt, 0, NIL, type),
p1_Operand(stmt, 1, fromType, from),
REQ_Var(stmt, type, stack) :-
	OpcodeExt(stmt, "checkcast", type),
	StackBeforeStmt(stmt, TOP2(fromType, from, stack)).

// Handle conditional jumps
p1_If(stmt, nextStmt),
p1_Operator(stmt, op),
p1_Operand(stmt, 0, type0, oper0),
p1_Operand(stmt, 1, type1, oper1),
StackForNext(stmt, stack) :-
	OpcodeExt(stmt, opcode, nextStmt),
	ImplicitCondJumpOpcode(opcode, op, type1, oper1),
	StackBeforeStmt(stmt, TOP2(type0, oper0, stack)).

p1_If(stmt, nextStmt),
p1_Operator(stmt, op),
p1_Operand(stmt, 0, type0, oper0),
p1_Operand(stmt, 1, type1, oper1),
StackForNext(stmt, stack) :-
	OpcodeExt(stmt, opcode, nextStmt),
	CondJumpOpcode(opcode, op),
	StackBeforeStmt(stmt, TOP4(type1, oper1, type0, oper0, stack)).

// ... and unconditional ones
p1_Goto(stmt, nextStmt),
StackForNext(stmt, stack) :-
	OpcodeExt(stmt, "goto", nextStmt),
	StackBeforeStmt(stmt, stack).


// Store the top of the stack into a var
// Found in source code
RES_Var(stmt, var) :-
	REQ_Var(stmt, _, _), // TODO type check
	p1_Next(stmt, nextStmt),
	OpcodeExt(nextStmt, "X-store", var).

// ...or generate a temp one
// temp vars for local results are not reused
p1_Var(method, var, varName, type, index, index + 1),
RES_Var(stmt, var) :-
	REQ_Var(stmt, type, _),
	BytecodeStmt(stmt, method, index),
	p1_Next(stmt, nextStmt),
	OpcodeExt(nextStmt, opcode, _),
	opcode != "X-store",
	varName = cat("$r", to_string(index)),
	var = CAT3(method, "/", varName).

// Fields... ///////////////////////////////////////////////////

// Load static field
p1_SLoad(stmt, fld),
REQ_Var(stmt, type, stack) :-
	OpcodeExt(stmt, "getstatic", fld),
	StackBeforeStmt(stmt, stack),
	Field(fld, type, _, _).

// Store static field
p1_SStore(stmt, fld),
p1_Operand(stmt, 0, type, oper),
StackForNext(stmt, stack) :-
	OpcodeExt(stmt, "putstatic", fld),
	StackBeforeStmt(stmt, TOP2(type, oper, stack)).

// Load instance field
p1_ILoad(stmt, fld),
p1_Operand(stmt, 0, varType, var),
REQ_Var(stmt, type, stack) :-
	OpcodeExt(stmt, "getfield", fld),
	StackBeforeStmt(stmt, TOP2(varType, var, stack)),
	Field(fld, type, _, _).

// Store instance field
p1_IStore(stmt, fld),
p1_Operand(stmt, 0, varType, var),
p1_Operand(stmt, 1, type, oper),
StackForNext(stmt, stack) :-
	OpcodeExt(stmt, "putfield", fld),
	StackBeforeStmt(stmt, TOP4(type, oper, varType, var, stack)).

// Allocations... //////////////////////////////////////////////

// -> heap id
StackForNext(stmt, TOP2(type, heap, stack)) :-
	OpcodeExt(stmt, "new", heap),
	StackBeforeStmt(stmt, stack),
	AllocType(stmt, type).

// Dup should only follow a `new` opcode -- ignore it
StackForNext(stmt, stack) :-
	OpcodeExt(stmt, "dup", _),
	StackBeforeStmt(stmt, stack).

ERROR(stmt, "dup should follow only a `new` opcode") :-
	OpcodeExt(stmt, "dup", _),
	p1_Next(prev, stmt),
	!OpcodeExt(prev, "new", _).

StackForNext(stmt, stack) :-
	OpcodeExt(stmt, "pop", _),
	StackBeforeStmt(stmt, [_, stack]).

// Convert from one type to another
StackForNext(stmt, [toTypeDesc, stack]) :-
	OpcodeExt(stmt, opcode, _),
	ConvertOpcode(opcode, fromTypeDesc, toTypeDesc),
	StackBeforeStmt(stmt, [fromTypeDesc, stack]).

// Calls... ////////////////////////////////////////////////////

// Pop call arguments from stack
REQ_ActualParam(stmt, argc - 1, stack) :-
	OpcodeExt(stmt, opcode, sig),
	CallOpcode(opcode),
	StackBeforeStmt(stmt, stack),
	Invocation(sig, argc, _, _).

// index -1 should keep either the receiver object or a heap id
// index -2 should keep the stack without anything related to the call

// actual arg1, arg2, ... ->
REQ_ActualParam(stmt, pos - 1, stack) :-
	REQ_ActualParam(stmt, pos, TOP2(_, _, stack)), pos >= 0.

// receiver var, or heap allocation ->
REQ_ActualParam(stmt, -2, stack) :-
	REQ_ActualParam(stmt, -1, TOP2(_, _, stack)),
	OpcodeExt(stmt, opcode, _),
	opcode != "invokestatic".

// duplicate stack for index -2 for static calls
REQ_ActualParam(stmt, -2, stack) :-
	OpcodeExt(stmt, "invokestatic", _),
	REQ_ActualParam(stmt, -1, stack).

p1_Operand(stmt, pos, type, notHeap) :-
	REQ_ActualParam(stmt, pos, TOP2(type, notHeap, _)), pos >= 0,
	!p1_Alloc(_, _, notHeap, _).

// Use the var instead of the heap id, as argument
p1_Operand(stmt, pos, type, var) :-
	REQ_ActualParam(stmt, pos, TOP2(type, heap, _)), pos >= 0,
	p1_Alloc(_, var, heap, _).

// Pop receiver object from stack
p1_VCall(stmt, base, sig) :-
	(OpcodeExt(stmt, "invokevirtual", sig) ;
	 OpcodeExt(stmt, "invokeinterface", sig)),
	REQ_ActualParam(stmt, -1, TOP2(_, base, _)).

// Pop receiver object from stack
p1_InitCall(stmt),
p1_Assign(allocStmt, base),
p1_Alloc(allocStmt, base, heap, type),
p1_SPCall(stmt, base, sig) :-
	OpcodeExt(stmt, "X-invokeinit", sig),
	REQ_ActualParam(stmt, -1, TOP2(type, heap, _)),
	OpcodeExt(allocStmt, "new", heap),
	RES_Var(stmt, base).

// Pop receiver object from stack
p1_SPCall(stmt, base, sig) :-
	OpcodeExt(stmt, "invokespecial", sig),
	REQ_ActualParam(stmt, -1, TOP2(_, base, _)).

p1_SCall(stmt, sig) :-
	OpcodeExt(stmt, "invokestatic", sig).

// -> var to store invocation result
REQ_Var(stmt, retType, stack) :-
	OpcodeExt(stmt, opcode, sig),
	CallOpcode(opcode),
	Invocation(sig, _, retType, _),
	(retType != "void" ; opcode = "X-invokeinit"),
	REQ_ActualParam(stmt, -2, stack).

// Propagate stack on void-returning calls (that are not constructors)
StackForNext(stmt, stack) :-
	OpcodeExt(stmt, opcode, sig),
	CallOpcode(opcode),
	opcode != "X-invokeinit",
	Invocation(sig, _, "void", _),
	REQ_ActualParam(stmt, -2, stack).

// Arrays... //////////////////////////////////////////////////

p1_Operand(stmt, 0, sizeType, size),
p1_ArrayAlloc(stmt, heap, type),
REQ_Var(stmt, type, stack) :-
	OpcodeExt(stmt, "newarray", heap),
	StackBeforeStmt(stmt, TOP2(sizeType, size, stack)),
	AllocType(stmt, type).

p1_Operator(stmt, "arraylength"),
p1_Operand(stmt, 0, type, array),
REQ_Var(stmt, INT_T, stack) :-
	OpcodeExt(stmt, "arraylength", _),
	StackBeforeStmt(stmt, TOP2(type, array, stack)).

// TODO fix types
p1_ALoad(stmt),
p1_Operand(stmt, 0, NIL, array),
p1_Operand(stmt, 1, INT_T, index),
REQ_Var(stmt, NIL, stack) :-
	OpcodeExt(stmt, "X-aload", _),
	StackBeforeStmt(stmt, TOP4(_, index, _, array, stack)).

p1_AStore(stmt, array),
p1_Operand(stmt, 0, INT_T, index),
p1_Operand(stmt, 1, fromType, from),
StackForNext(stmt, stack) :-
	OpcodeExt(stmt, "X-astore", _),
	StackBeforeStmt(stmt, TOP2(fromType, from, TOP4(_, index, _, array, stack))).

///////////////////////////////////////////////////////////////

p1_Throw(stmt, var),
StackForNext(stmt, stack) :-
	OpcodeExt(stmt, "athrow", _),
	StackBeforeStmt(stmt, TOP2(_, var, stack)).

// Initialize stack for first statement
StackBeforeStmt(stmt, nil) :- BytecodeStmt(stmt, _, 0).

// Propagate stack to all successors
StackBeforeStmt(nextStmt, stack) :-
	StackForNext(stmt, stack),
	p1_Next(stmt, nextStmt).

// Prepare stack for an exception handler
StackBeforeStmt(handlerStmt, TOP2(type, type, nil)) :-
	p1_ExceptionHandler(_, _, _, handlerStmt, type, _).

// Handle all assignments to temp or source code vars
REQ_Assign(stmt, var),
StackForNext(stmt, TOP2(type, var, stack)) :-
	REQ_Var(stmt, type, stack),
	RES_Var(stmt, var).

// Approve all assignments, except self-assign ones
p1_Assign(stmt, to) :-
	REQ_Assign(stmt, to),
	!p1_Operand(stmt, _, _, _).

p1_Assign(stmt, to) :-
	REQ_Assign(stmt, to),
	p1_Operand(stmt, 0, _, oper), to != oper.

p1_Assign(stmt, to) :-
	REQ_Assign(stmt, to),
	p1_Operand(stmt, 0, _, to),
	p1_Operand(stmt, 1, _, _).

p1_Assign(stmt, to) :-
	REQ_Assign(stmt, to),
	p1_Operand(stmt, 0, _, to),
	p1_Operand(stmt, 1, _, _).