#pragma once
#include "schema.dl"

.decl __REQ_StackForNext(stmt: symbol, stack: Stack)
.decl __REQ_Var(stmt: symbol, stack: Stack)
.decl __RES_Var(stmt: symbol, var: symbol)
.decl __REQ_ActualParam(stmt: symbol, pos: number, stack: Stack)
.decl __REQ_Assign(stmt: symbol, to: symbol)
.decl __REQ_Operand(stmt: symbol, pos: number, value: symbol)

// -> constant value
__REQ_StackForNext(stmt, [const, stack]) :-
	StackBeforeStmt(stmt, stack),
	OpcodeExt(stmt, opcode, const),
	ConstLoadOpcode(opcode).

// -> value
__REQ_StackForNext(stmt, [var, stack]) :-
	StackBeforeStmt(stmt, stack),
	OpcodeExt(stmt, "X-load", var).

// value ->
__REQ_Assign(stmt, var),
__REQ_Operand(stmt, 0, oper),
__REQ_StackForNext(stmt, stack) :-
	StackBeforeStmt(stmt, [oper, stack]),
	OpcodeExt(stmt, "X-store", var).

// return value ->
RET(stmt),
__Operand(stmt, 0, oper),
__REQ_StackForNext(stmt, stack) :-
	StackBeforeStmt(stmt, [oper, stack]),
	OpcodeExt(stmt, "X-return", _).

// return void
RET_VOID(stmt),
__REQ_StackForNext(stmt, stack) :-
	StackBeforeStmt(stmt, stack),
	OpcodeExt(stmt, "return", _).

// -> heap id
__REQ_StackForNext(stmt, [heap, stack]) :-
	StackBeforeStmt(stmt, stack),
	OpcodeExt(stmt, "new", heap).

// Dup should only follow a `new` opcode -- ignore it
__REQ_StackForNext(stmt, stack) :-
	StackBeforeStmt(stmt, stack),
	OpcodeExt(stmt, "dup", _).

ERROR(stmt, "dup should follow only a `new` opcode") :-
	OpcodeExt(stmt, "dup", _),
	NEXT(prev, stmt),
	!OpcodeExt(prev, "new", _).


// Calls...
// Pop call arguments from stack
__REQ_ActualParam(stmt, argc - 1, stack) :-
	StackBeforeStmt(stmt, stack),
	OpcodeExt(stmt, opcode, sig),
	CallOpcode(opcode),
	Invocation(sig, argc, _).

// actual arg1, arg2, ... ->
__REQ_ActualParam(stmt, pos - 1, stack) :-
	__REQ_ActualParam(stmt, pos, [_, stack]), pos >= 0.

// index -1 should keep either the receiver object or a heap id
// index -2 should keep the stack without anything related to the call

// receiver var, or heap allocation ->
__REQ_ActualParam(stmt, -2, stack) :-
	__REQ_ActualParam(stmt, -1, [_, stack]),
	OpcodeExt(stmt, opcode, _),
	opcode != "invokestatic".

// duplicate stack for index -2 for static calls
__REQ_ActualParam(stmt, -2, stack) :-
	__REQ_ActualParam(stmt, -1, stack),
	OpcodeExt(stmt, "invokestatic", _).

ACTUAL_PARAM(stmt, pos, notHeap) :-
	__REQ_ActualParam(stmt, pos, [notHeap, _]), pos >= 0,
	!ALLOC(_, _, notHeap, _).

ACTUAL_PARAM(stmt, pos, var) :-
	__REQ_ActualParam(stmt, pos, [heap, _]), pos >= 0,
	ALLOC(_, var, heap, _).

// -> var to store invocation result
__REQ_Var(stmt, stack) :-
	OpcodeExt(stmt, opcode, sig),
	CallOpcode(opcode),
	Invocation(sig, _, retType),
	(retType != "void" ; opcode = "X-invokeinit"),
	__REQ_ActualParam(stmt, -2, stack).

// Propagate stack on non-returning calls
__REQ_StackForNext(stmt, stack) :-
	OpcodeExt(stmt, opcode, sig),
	CallOpcode(opcode),
	Invocation(sig, _, "void"), opcode != "X-invokeinit",
	__REQ_ActualParam(stmt, -2, stack).

// Pop receiver object from stack
ALLOC(allocStmt, base, heap, type),
SPCALL(stmt, base, sig) :-
	OpcodeExt(stmt, "X-invokeinit", sig),
	__REQ_ActualParam(stmt, -1, [heap, _]),
	OpcodeExt(allocStmt, "new", heap),
	__RES_Var(stmt, base),
	AllocType(allocStmt, type).

// Pop receiver object from stack
SPCALL(stmt, base, sig) :-
	OpcodeExt(stmt, "invokespecial", sig),
	__REQ_ActualParam(stmt, -1, [base, _]).

// Pop receiver object from stack
VCALL(stmt, base, sig) :-
	OpcodeExt(stmt, "invokevirtual", sig),
	__REQ_ActualParam(stmt, -1, [base, _]).


// Store the top of the stack into a var
// Found in source code
__RES_Var(stmt, var) :-
	__REQ_Var(stmt, _),
	NEXT(stmt, nextStmt),
	OpcodeExt(nextStmt, "X-store", var).

// ...or generate a temp one
__RES_Var(stmt, var) :-
	__REQ_Var(stmt, _),
	Stmt(stmt, method, i),
	NEXT(stmt, nextStmt),
	OpcodeExt(nextStmt, opcode, _),
	opcode != "X-store",
	var = cat(cat(method, "/"), cat("$r", to_string(i))).

// Handle all assignments to temp or source code vars
__REQ_Assign(stmt, var),
__REQ_StackForNext(stmt, [var, stack]) :-
	__REQ_Var(stmt, stack),
	__RES_Var(stmt, var).

// Compute an intermediate result
// Swap order of operands due to stack semantics
OPERATOR(stmt, op),
__Operand(stmt, 0, oper0),
__Operand(stmt, 1, oper1),
__REQ_Var(stmt, stack) :-
	StackBeforeStmt(stmt, [oper1, [oper0, stack]]),
	OpcodeExt(stmt, opcode, _),
	BinOpcode(opcode, op).

OPERATOR(stmt, op),
__Operand(stmt, 0, oper),
__REQ_Var(stmt, stack) :-
	StackBeforeStmt(stmt, [oper, stack]),
	OpcodeExt(stmt, opcode, _),
	UnaryOpcode(opcode, op).

// Handle ++, --, +=, -=
__Assign(stmt, var),
OPERATOR(stmt, op),
__Operand(stmt, 0, var),
__Operand(stmt, 1, value),
__REQ_StackForNext(stmt, stack) :-
	StackBeforeStmt(stmt, stack),
	((OpcodeExt(stmt, "X-inc", var), op = "+") ;
	 (OpcodeExt(stmt, "X-dec", var), op = "-")),
	IncValue(stmt, value).

// Load static field
SLOAD(stmt),
__Operand(stmt, 0, fld),
__REQ_Var(stmt, stack) :-
	StackBeforeStmt(stmt, stack),
	OpcodeExt(stmt, "getstatic", fld).

__REQ_StackForNext(stmt, stack) :-
	StackBeforeStmt(stmt, [_, stack]),
	OpcodeExt(stmt, "pop", _).

// Handle conditional jumps
OPERATOR(stmt, op),
__Operand(stmt, 0, oper0),
__Operand(stmt, 1, oper1),
__REQ_StackForNext(stmt, stack) :-
	StackBeforeStmt(stmt, [oper0, stack]),
	OpcodeExt(stmt, opcode, _),
	((ZeroCondJumpOpcode(opcode, op), oper1 = "0") ;
	 (NullCondJumpOpcode(opcode, op), oper1 = "NULL")).

OPERATOR(stmt, op),
__Operand(stmt, 0, oper0),
__Operand(stmt, 1, oper1),
__REQ_StackForNext(stmt, stack) :-
	StackBeforeStmt(stmt, [oper1, [oper0, stack]]),
	OpcodeExt(stmt, opcode, _),
	CondJumpOpcode(opcode, op).

// ... and unconditional ones
__REQ_StackForNext(stmt, stack) :-
	StackBeforeStmt(stmt, stack),
	OpcodeExt(stmt, "goto", _).

// Prepare stack for an exception handler
StackBeforeStmt(handlerStmt, [type, nil]) :-
	EXCEPTION_HANDLER(_, _, _, handlerStmt, type, _).

THROW(stmt, var),
__REQ_StackForNext(stmt, stack) :-
	StackBeforeStmt(stmt, [var, stack]),
	OpcodeExt(stmt, "athrow", _).

///////////////////////////////////////////////////////////////

// Approve all assignments, except self-assign ones
__Assign(stmt, to) :-
	__REQ_Assign(stmt, to),
	!__REQ_Operand(stmt, 0, to).

__Operand(stmt, pos, oper) :-
	__REQ_Operand(stmt, pos, oper),
	__Assign(stmt, _).

ACTUAL_RET(stmt, var) :-
	__REQ_Assign(stmt, var),
	OpcodeExt(stmt, opcode, _),
	CallOpcode(opcode).
