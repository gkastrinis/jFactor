#pragma once

// Order vars participating in phi-nodes, for a given basic block
.decl VarToOrdInPHI(inBB: symbol, var: symbol, order: number)
// Order ssa-variants of a var participating in phi-nodes, for a given basic block
.decl SSAVarToOrdInPHI(inBB: symbol, var: symbol, ssaVar: symbol, order: number)
.decl NextBaseVarInPHI(inBB: symbol, prev: symbol, next: symbol)
.decl NextSSAVarForVarInPHI(inBB: symbol, var: symbol, prev: symbol, next: symbol)
.decl NextVarInPHI(index: number, inBB: symbol, prev: symbol, next: symbol)
.decl TotalSSAVarsInPHI(inBB: symbol, total: number)

// Arbitrarily order vars
VarToOrdInPHI(inBB, to, ord(to)) :- p2_PhiAssign(inBB, to, _).

// ... and ssa-variants of the same var
SSAVarToOrdInPHI(inBB, to, ssaVar, ord(ssaVar)) :-
	p2_PhiAssign(inBB, to, _),
	p2_Operand(inBB, 0, ssaVar),
	p2_Assign(_, to, ssaVar, _, _).

// Order base vars
NextBaseVarInPHI(inBB, NIL, var) :-
	VarToOrdInPHI(inBB, var, minOrd),
	minOrd = min ord1 : { VarToOrdInPHI(inBB, _, ord1) }.

NextBaseVarInPHI(inBB, prevVar, nextVar) :-
	NextBaseVarInPHI(inBB, _, prevVar),
	VarToOrdInPHI(inBB, prevVar, prevOrd),
	VarToOrdInPHI(inBB, nextVar, nextOrd),
	nextOrd = min ord1 : { VarToOrdInPHI(inBB, _, ord1), ord1 > prevOrd }.

// Order ssa-variants, for a given base var
NextSSAVarForVarInPHI(inBB, var, NIL, minSsaVar) :-
	SSAVarToOrdInPHI(inBB, var, minSsaVar, minOrd),
	minOrd = min ord1 : { SSAVarToOrdInPHI(inBB, var, _, ord1) }.

NextSSAVarForVarInPHI(inBB, var, prevVar, nextVar) :-
	NextSSAVarForVarInPHI(inBB, var, _, prevVar),
	SSAVarToOrdInPHI(inBB, var, prevVar, prevOrd),
	SSAVarToOrdInPHI(inBB, var, nextVar, nextOrd),
	nextOrd = min ord1 : { SSAVarToOrdInPHI(inBB, var, _, ord1), ord1 > prevOrd }.

// First ssa-variant, of the first var in the basic block
NextVarInPHI(0, inBB, NIL, minSsaVar) :-
	NextBaseVarInPHI(inBB, NIL, var),
	NextSSAVarForVarInPHI(inBB, var, NIL, minSsaVar).

// Next ssa-variant, based on the previous ssa-variant
NextVarInPHI(prevIndex + 1, inBB, prevVar, nextVar) :-
	NextVarInPHI(prevIndex, inBB, _, prevVar),
	NextSSAVarForVarInPHI(inBB, _, prevVar, nextVar).

// Previous ssa-variant has no next variant
// Move on to the first ssa-variant of the next base var
NextVarInPHI(prevIndex + 1, inBB, prevVar, nextVar) :-
	NextVarInPHI(prevIndex, inBB, _, prevVar),
	!NextSSAVarForVarInPHI(inBB, _, prevVar, _),
	SSAVarToOrdInPHI(inBB, baseVar, prevVar, _),
	NextBaseVarInPHI(inBB, baseVar, nextBaseVar),
	NextSSAVarForVarInPHI(inBB, nextBaseVar, NIL, nextVar).

// Total count of variables in current PHI hyper-node
TotalSSAVarsInPHI(inBB, lastIndex + 1) :-
	p2_PhiAssign(inBB, _, _),
	NextVarInPHI(lastIndex, inBB, _, lastVar),
	!NextVarInPHI(lastIndex + 1, inBB, lastVar, _).


.decl OpcodeToHide(opcode: symbol)
.decl BCIndexToHide(method: symbol, bcIndex: number)
.decl p3_Indexing(method: symbol, tag: symbol, opcode: symbol, bcIndex: number, p3Index: number)
.decl p3_ToFinalIndex(method: symbol, stmt: symbol, bcIndex: number, p3Index: number, finalIndex: number, currLast: number)
.decl p3_PhiAssign(method: symbol, p3Index: number, to: symbol, from: symbol)
// Fix jump targets based on final indexing
.decl REQ_NewJumpTarget(stmt: symbol, method: symbol, jumpIndex: number)
.decl RES_NewJumpTarget(stmt: symbol, newJumpStmt: symbol)
// Bytecode statement to final statement
.decl BC_ToFinal(bcStmt: symbol, stmt: symbol)

// TODO is the list complete?
OpcodeToHide("X-load").
OpcodeToHide("X-Bconst").
OpcodeToHide("X-Cconst").
OpcodeToHide("X-Dconst").
OpcodeToHide("X-Fconst").
OpcodeToHide("X-Iconst").
OpcodeToHide("X-Lconst").
OpcodeToHide("X-Sconst").
OpcodeToHide("X-String").
OpcodeToHide("X-NULL").
OpcodeToHide("dup").
OpcodeToHide("pop").

BCIndexToHide(method, bcIndex) :-
	OpcodeExt(stmt, "X-store", _),
	BytecodeStmt(stmt, method, bcIndex),
	!p2_Assign(stmt, _, _, _, _).

// Start from -1, to avoid PHI nodes at the beginning of a method
p3_ToFinalIndex(method, NIL, -1, -1, -1, -1),
p3_Indexing(method, "/prologue", NIL, -1, -1) :- BytecodeStmt(_, method, _).

// For non-PHI nodes, just increment the index
p3_Indexing(method, "", opcode, prevBytecodeIndex + 1, prevIndex + 1) :-
	p3_Indexing(method, _, _, prevBytecodeIndex, prevIndex),
	BytecodeStmt(stmt, method, prevBytecodeIndex + 1),
	OpcodeExt(stmt, opcode, _),
	!p2_PhiAssign(stmt, _, _).

// Calculate the index of the first, non-PHI assignment in a PHI node
p3_Indexing(method, "", opcode, prevBytecodeIndex + 1, prevIndex + 1 + total) :-
	p3_Indexing(method, _, _, prevBytecodeIndex, prevIndex),
	BytecodeStmt(stmt, method, prevBytecodeIndex + 1),
	OpcodeExt(stmt, opcode, _),
	p2_PhiAssign(stmt, _, _),
	TotalSSAVarsInPHI(stmt, total).

// Give each PHI assignment an index based on ordering
// -2 for original bytecode index
p3_PhiAssign(method, p3Index, ssaTo, ssaVar),
p3_Indexing(method, "/PHI", NIL, -2, p3Index) :-
	p3_Indexing(method, _, _, prevBytecodeIndex, prevIndex),
	BytecodeStmt(stmt, method, prevBytecodeIndex + 1),
	p2_PhiAssign(stmt, to, ssaTo),
	NextVarInPHI(indexInPHI, stmt, _, ssaVar),
	SSAVarToOrdInPHI(stmt, to, ssaVar, _),
	p3Index = prevIndex + 1 + indexInPHI.

// Generate final indexes for statements that are not hidden
p3_ToFinalIndex(method, newStmt, bcIndex, p3Index + 1, currLast + 1, currLast + 1) :-
	p3_ToFinalIndex(method, _, _, p3Index, _, currLast),
	p3_Indexing(method, tag, opcode, bcIndex, p3Index + 1),
	!OpcodeToHide(opcode),
	!BCIndexToHide(method, bcIndex),
	newStmt = CAT4(method, "/", to_string(currLast + 1), tag).

p3_ToFinalIndex(method, NIL, bcIndex, p3Index + 1, -1, currLast) :-
	p3_ToFinalIndex(method, _, _, p3Index, _, currLast),
	p3_Indexing(method, _, opcode, bcIndex, p3Index + 1),
	(OpcodeToHide(opcode) ; BCIndexToHide(method, bcIndex)).

REQ_NewJumpTarget(stmt, method, jumpIndex) :-
	(p1_If(bcStmt, bcJumpStmt) ; p1_Goto(bcStmt, bcJumpStmt)),
	BC_ToFinal(bcStmt, stmt),
	!BC_ToFinal(bcJumpStmt, _),
	!p2_PhiAssign(bcJumpStmt, _, _),
	BytecodeStmt(bcJumpStmt, method, bcJumpIndex),
	p3_ToFinalIndex(method, _, bcJumpIndex, jumpIndex, _, _).

// Use the next valid (not hidden) statement as the new jump target
RES_NewJumpTarget(stmt, newJumpStmt) :-
	REQ_NewJumpTarget(stmt, method, jumpIndex),
	p3_ToFinalIndex(method, newJumpStmt, _, _, newJumpIndex, _),
	newJumpIndex = min index :
	{ p3_ToFinalIndex(method, _, _, p3Index, index, _), p3Index >= jumpIndex, index >= 0 }.

// Jump to the first statement of a phi-node
RES_NewJumpTarget(stmt, jumpStmt) :-
	(p1_If(bcStmt, bcJumpStmt) ; p1_Goto(bcStmt, bcJumpStmt)),
	BC_ToFinal(bcStmt, stmt),
	!BC_ToFinal(bcJumpStmt, _),
	p2_PhiAssign(bcJumpStmt, _, _),
	TotalSSAVarsInPHI(bcJumpStmt, total),
	BytecodeStmt(bcJumpStmt, method, bcJumpIndex),
	p3_ToFinalIndex(method, _, bcJumpIndex, p3Index, _, _),
	p3_ToFinalIndex(method, jumpStmt, _, p3Index - total, _, _).

// Final Statement form
Stmt(stmt, method, index) :-
	p3_ToFinalIndex(method, stmt, _, _, index, _), index != -1.

BC_ToFinal(bcStmt, stmt) :-
	p3_ToFinalIndex(method, stmt, bcIndex, _, index, _), index != -1,
	BytecodeStmt(bcStmt, method, bcIndex).

NextStmt(fromStmt, toStmt) :-
	p1_Next(bcFromStmt, bcToStmt),
	BC_ToFinal(bcFromStmt, fromStmt),
	BC_ToFinal(bcToStmt, toStmt).